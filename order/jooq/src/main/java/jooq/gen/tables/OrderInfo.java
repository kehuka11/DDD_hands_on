/*
 * This file is generated by jOOQ.
 */
package jooq.gen.tables;


import java.time.LocalDateTime;
import java.util.function.Function;

import jooq.gen.Keys;
import jooq.gen.Order;
import jooq.gen.tables.records.OrderInfoRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrderInfo extends TableImpl<OrderInfoRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>order.order_info</code>
     */
    public static final OrderInfo ORDER_INFO = new OrderInfo();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrderInfoRecord> getRecordType() {
        return OrderInfoRecord.class;
    }

    /**
     * The column <code>order.order_info.order_id</code>.
     */
    public final TableField<OrderInfoRecord, String> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>order.order_info.order_date_time</code>.
     */
    public final TableField<OrderInfoRecord, LocalDateTime> ORDER_DATE_TIME = createField(DSL.name("order_date_time"), SQLDataType.LOCALDATETIME(0), this, "");

    /**
     * The column <code>order.order_info.status</code>.
     */
    public final TableField<OrderInfoRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>order.order_info.total_amount</code>.
     */
    public final TableField<OrderInfoRecord, Long> TOTAL_AMOUNT = createField(DSL.name("total_amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>order.order_info.updated_time</code>.
     */
    public final TableField<OrderInfoRecord, LocalDateTime> UPDATED_TIME = createField(DSL.name("updated_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>order.order_info.created_time</code>.
     */
    public final TableField<OrderInfoRecord, LocalDateTime> CREATED_TIME = createField(DSL.name("created_time"), SQLDataType.LOCALDATETIME(0).defaultValue(DSL.field("CURRENT_TIMESTAMP", SQLDataType.LOCALDATETIME)), this, "");

    private OrderInfo(Name alias, Table<OrderInfoRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrderInfo(Name alias, Table<OrderInfoRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>order.order_info</code> table reference
     */
    public OrderInfo(String alias) {
        this(DSL.name(alias), ORDER_INFO);
    }

    /**
     * Create an aliased <code>order.order_info</code> table reference
     */
    public OrderInfo(Name alias) {
        this(alias, ORDER_INFO);
    }

    /**
     * Create a <code>order.order_info</code> table reference
     */
    public OrderInfo() {
        this(DSL.name("order_info"), null);
    }

    public <O extends Record> OrderInfo(Table<O> child, ForeignKey<O, OrderInfoRecord> key) {
        super(child, key, ORDER_INFO);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Order.ORDER;
    }

    @Override
    public UniqueKey<OrderInfoRecord> getPrimaryKey() {
        return Keys.KEY_ORDER_INFO_PRIMARY;
    }

    @Override
    public OrderInfo as(String alias) {
        return new OrderInfo(DSL.name(alias), this);
    }

    @Override
    public OrderInfo as(Name alias) {
        return new OrderInfo(alias, this);
    }

    @Override
    public OrderInfo as(Table<?> alias) {
        return new OrderInfo(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderInfo rename(String name) {
        return new OrderInfo(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderInfo rename(Name name) {
        return new OrderInfo(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrderInfo rename(Table<?> name) {
        return new OrderInfo(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<String, LocalDateTime, String, Long, LocalDateTime, LocalDateTime> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super String, ? super LocalDateTime, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super String, ? super LocalDateTime, ? super String, ? super Long, ? super LocalDateTime, ? super LocalDateTime, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
